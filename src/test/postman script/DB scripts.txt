postgres
postgres
jdbc:postgresql://my-postgres.c5sey48eippw.us-east-1.rds.amazonaws.com:5432/postgres

CREATE TABLE customer (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    account_type VARCHAR(50) NOT NULL
);




INSERT INTO customer (name, address, account_type) VALUES
('Hariharan N', '123 Elm St, Springfield', 'Checking'),
('Jane Smith', '456 Oak St, Springfield', 'Savings'),
('Alice Johnson', '789 Pine St, Springfield', 'Checking'),
('Bob Brown', '101 Maple Ave, Springfield', 'Savings'),
('Carol White', '202 Birch St, Springfield', 'Checking'),
('David Green', '303 Cedar St, Springfield', 'Savings'),
('Eve Black', '404 Willow St, Springfield', 'Checking'),
('Frank Harris', '505 Walnut St, Springfield', 'Savings'),
('Grace Martin', '606 Cherry St, Springfield', 'Checking'),
('Hank Clark', '707 Spruce St, Springfield', 'Savings'),
('Ivy Lewis', '808 Fir St, Springfield', 'Checking'),
('Jack Young', '909 Redwood St, Springfield', 'Savings'),
('Kathy King', '1010 Poplar St, Springfield', 'Checking'),
('Leo Scott', '1111 Aspen St, Springfield', 'Savings'),
('Mia Turner', '1212 Sycamore St, Springfield', 'Checking'),
('Nate Adams', '1313 Elm St, Springfield', 'Savings'),
('Olivia Carter', '1414 Oak St, Springfield', 'Checking'),
('Paul Mitchell', '1515 Pine St, Springfield', 'Savings'),
('Quinn Roberts', '1616 Maple Ave, Springfield', 'Checking'),
('Rita Stewart', '1717 Birch St, Springfield', 'Savings'),
('Steve Adams', '1818 Cedar St, Springfield', 'Checking'),
('Tina Wilson', '1919 Willow St, Springfield', 'Savings'),
('Ulysses Hall', '2020 Walnut St, Springfield', 'Checking'),
('Vera Lee', '2121 Cherry St, Springfield', 'Savings'),
('Walter Walker', '2222 Spruce St, Springfield', 'Checking'),
('Xena White', '2323 Fir St, Springfield', 'Savings'),
('Yara Martinez', '2424 Redwood St, Springfield', 'Checking'),
('Zachary Nelson', '2525 Poplar St, Springfield', 'Savings'),
('Anna Scott', '2626 Aspen St, Springfield', 'Checking'),
('Brian Wright', '2727 Sycamore St, Springfield', 'Savings'),
('Catherine Harris', '2828 Elm St, Springfield', 'Checking'),
('Daniel Lewis', '2929 Oak St, Springfield', 'Savings'),
('Ella Brown', '3030 Pine St, Springfield', 'Checking'),
('Franklin Davis', '3131 Maple Ave, Springfield', 'Savings'),
('Grace Turner', '3232 Birch St, Springfield', 'Checking'),
('Henry Young', '3333 Cedar St, Springfield', 'Savings'),
('Isabel Wilson', '3434 Willow St, Springfield', 'Checking'),
('James Martinez', '3535 Walnut St, Springfield', 'Savings'),
('Karen Johnson', '3636 Cherry St, Springfield', 'Checking'),
('Larry Adams', '3737 Spruce St, Springfield', 'Savings'),
('Maria King', '3838 Fir St, Springfield', 'Checking'),
('Nina Harris', '3939 Redwood St, Springfield', 'Savings'),
('Oscar Mitchell', '4040 Poplar St, Springfield', 'Checking'),
('Paula Lewis', '4141 Aspen St, Springfield', 'Savings'),
('Quincy White', '4242 Sycamore St, Springfield', 'Checking'),
('Riley Clark', '4343 Elm St, Springfield', 'Savings'),
('Sandra Green', '4444 Oak St, Springfield', 'Checking'),
('Timothy Hall', '4545 Pine St, Springfield', 'Savings'),
('Ursula Martinez', '4646 Maple Ave, Springfield', 'Checking'),
('Victor Scott', '4747 Birch St, Springfield', 'Savings'),
('Wendy Turner', '4848 Cedar St, Springfield', 'Checking'),
('Xander Davis', '4949 Willow St, Springfield', 'Savings');



Here’s a design for a microservices architecture for a bank-themed application with three distinct services, each using a different backend technology and interconnected logically:

1. Customer Service (Already Created)
Function: Manages customer data such as personal details, address, account type, etc.
Database: PostgreSQL (already created on AWS RDS).
Technology Stack: Spring Boot, PostgreSQL, REST API.
Responsibilities:
CRUD operations for customer information.
Retrieve customer details for downstream services (e.g., Payment and Transaction Services).
2. Payment Service (Use AWS DocumentDB - NoSQL)
Function: Handles payments and transaction processing for customers. Each payment is stored in a NoSQL database (ideal for the transactional nature and potentially high throughput).
Database: AWS DocumentDB (Amazon's MongoDB-compatible database).
Technology Stack: Spring Boot, AWS DocumentDB, REST API.
Responsibilities:
Initiate and record payments.
Handle payment status, such as "pending", "successful", or "failed".
Retrieve transaction history for customers.
Document Structure Example in AWS DocumentDB:

json
Copy code
{
  "_id": "transaction_id",
  "customerId": "customer_id_from_postgres",
  "amount": 500.00,
  "currency": "USD",
  "status": "SUCCESS",
  "transactionDate": "2024-09-15T14:30:00Z",
  "paymentMethod": {
    "type": "credit_card",
    "cardNumber": "**** **** **** 1234"
  }
}
Integration:

Payment Service will retrieve customer data from the Customer Service using a REST API.
The service will manage the logic for processing transactions, storing them in AWS DocumentDB.
AWS Free Tier offers 30 GB storage with AWS DocumentDB which should be sufficient for a small-scale microservice.
3. Notification Service (Use AWS Managed Streaming for Apache Kafka)
Function: Sends notifications (e.g., email, SMS) when certain events occur, such as successful payments, failed transactions, or changes in customer profiles.
Backend: AWS MSK (Managed Streaming for Apache Kafka) – used to stream events like payments being completed, or customer updates.
Technology Stack: Spring Boot, AWS MSK, Kafka Streams, REST API.
Responsibilities:
Listen for events (e.g., a payment completed or customer information updated).
Send notifications to customers (via email, SMS, or app notification).
Kafka topics:
payment_notifications: Receives events about payment success or failure.
customer_notifications: Receives events about customer updates.
Integration:

Payment Service publishes a message to the payment_notifications Kafka topic whenever a payment is processed.
Customer Service publishes a message to the customer_notifications Kafka topic when customer information is updated.
The Notification Service subscribes to both Kafka topics and triggers notifications accordingly.
AWS Free Tier offers some limited usage of MSK (750 hours/month), which should suffice for testing and low-volume applications.
Logical Flow of the Microservices:
Customer Service (PostgreSQL-based):

Manages customer data.
Provides API to retrieve customer information for other services.
Payment Service (AWS DocumentDB):

Retrieves customer data via REST API from the Customer Service.
Processes payments, stores transaction data in AWS DocumentDB, and publishes payment status events to Kafka.
Notification Service (AWS MSK - Kafka):

Listens for events from the Payment Service and Customer Service.
Sends out notifications for key events, such as payment completion or customer data updates.
Technology Choices Breakdown:
Customer Service:

Backend: PostgreSQL (AWS RDS).
Reason: Relational database structure is ideal for managing structured customer data.
Payment Service:

Backend: AWS DocumentDB (MongoDB-compatible).
Reason: NoSQL is great for managing high-throughput transaction data where schema flexibility and scalability are important.
Notification Service:

Backend: AWS Managed Kafka (MSK).
Reason: Kafka is well-suited for event-driven communication, allowing services to remain decoupled but still communicate asynchronously through event streams.
Summary of Services and Technology Stack
Service	Technology	Database	Purpose
Customer	Spring Boot	PostgreSQL (RDS)	Manages customer information (CRUD).
Payment	Spring Boot	AWS DocumentDB	Processes and stores payment transactions.
Notification	Spring Boot + Kafka	AWS MSK	Listens to events and sends notifications.



